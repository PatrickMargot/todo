{"version":3,"sources":["Todos.tsx","Profile.tsx","App.tsx","serviceWorkerRegistration.ts","index.tsx"],"names":["Todos","useState","localValue","localStorage","getItem","JSON","parse","todos","setTodos","todoName","setTodoName","useEffect","setItem","stringify","List","ListItem","TextField","label","value","onChange","event","target","ListItemSecondaryAction","IconButton","onClick","edge","disabled","map","todo","index","Divider","ListItemText","primary","filter","_","i","removeTodo","useStyles","makeStyles","theme","root","display","flexDirection","alignItems","marginTop","spacing","avatar","width","height","input","Profile","classes","source","setSource","name","setName","className","accept","id","type","capture","e","files","length","file","newUrl","URL","createObjectURL","console","log","handleCapture","htmlFor","Badge","overlap","anchorOrigin","vertical","horizontal","badgeContent","fontSize","color","aria-label","component","Avatar","src","headerTitle","textTransform","jokeListItem","maxWidth","App","page","setPage","drawerOpen","setDrawerOpen","joke","setJoke","setNewJoke","fetch","then","response","text","catch","AppBar","position","Toolbar","Typography","variant","Drawer","anchor","open","onClose","button","ListItemIcon","renderPage","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","ReactDOM","render","StrictMode","document","getElementById","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.0490ae7f.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\n\r\nfunction Todos() {\r\n  const [todos, setTodos] = useState<string[]>(() => {\r\n    const localValue = localStorage.getItem(\"TODOS\");\r\n\r\n    return localValue !== null ? JSON.parse(localValue) : [];\r\n  });\r\n\r\n  const [todoName, setTodoName] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"TODOS\", JSON.stringify(todos));\r\n  }, [todos]);\r\n\r\n  const addTodo = (todo: string) => setTodos([todo, ...todos]);\r\n\r\n  const removeTodo = (index: number) =>\r\n    setTodos(todos.filter((_, i) => i !== index));\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) =>\r\n    setTodoName(event.target.value);\r\n\r\n  return (\r\n    <List>\r\n      <ListItem>\r\n        <TextField\r\n          label=\"What's to do...\"\r\n          value={todoName}\r\n          onChange={handleChange}\r\n        />\r\n        <ListItemSecondaryAction>\r\n          <IconButton\r\n            onClick={() => {\r\n              addTodo(todoName);\r\n              setTodoName(\"\");\r\n            }}\r\n            edge=\"end\"\r\n            disabled={todoName === \"\"}\r\n          >\r\n            <AddIcon />\r\n          </IconButton>\r\n        </ListItemSecondaryAction>\r\n      </ListItem>\r\n      {todos.map((todo, index) => (\r\n        <>\r\n          <Divider />\r\n          <ListItem key={todo}>\r\n            <ListItemText primary={todo} />\r\n            <ListItemSecondaryAction>\r\n              <IconButton onClick={() => removeTodo(index)} edge=\"end\">\r\n                <DeleteIcon />\r\n              </IconButton>\r\n            </ListItemSecondaryAction>\r\n          </ListItem>\r\n        </>\r\n      ))}\r\n    </List>\r\n  );\r\n}\r\n\r\nexport default Todos;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\n\r\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport PhotoCameraIcon from \"@material-ui/icons/PhotoCamera\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    \"& > *\": {\r\n      marginTop: theme.spacing(5),\r\n    },\r\n  },\r\n  avatar: {\r\n    width: theme.spacing(10),\r\n    height: theme.spacing(10),\r\n  },\r\n  input: {\r\n    display: \"none\",\r\n  },\r\n}));\r\n\r\nfunction Profile() {\r\n  const classes = useStyles();\r\n  const [source, setSource] = useState(\"\");\r\n  const [name, setName] = useState(() => {\r\n    const localValue = localStorage.getItem(\"NAME\");\r\n\r\n    return localValue !== null ? localValue : \"\";\r\n  });\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"NAME\", name);\r\n  }, [name]);\r\n\r\n  const handleCapture = (target: EventTarget & HTMLInputElement) => {\r\n    if (target.files) {\r\n      if (target.files.length !== 0) {\r\n        const file = target.files[0];\r\n        const newUrl = URL.createObjectURL(file);\r\n        setSource(newUrl);\r\n        console.log(newUrl);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <input\r\n        accept=\"image/*\"\r\n        className={classes.input}\r\n        id=\"icon-button-file\"\r\n        type=\"file\"\r\n        capture=\"environment\"\r\n        onChange={e => handleCapture(e.target)}\r\n      />\r\n      <label htmlFor=\"icon-button-file\">\r\n        <Badge\r\n          overlap=\"circle\"\r\n          anchorOrigin={{\r\n            vertical: \"bottom\",\r\n            horizontal: \"right\",\r\n          }}\r\n          badgeContent={<PhotoCameraIcon fontSize=\"large\" color=\"primary\" />}\r\n        >\r\n          <IconButton\r\n            color=\"primary\"\r\n            aria-label=\"upload picture\"\r\n            component=\"span\"\r\n          >\r\n            <Avatar src={source} className={classes.avatar} />\r\n          </IconButton>\r\n        </Badge>\r\n      </label>\r\n      <TextField\r\n        label=\"Name\"\r\n        value={name}\r\n        onChange={e => setName(e.target.value)}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Profile;\r\n","import React, { useState, useEffect } from \"react\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Divider from \"@material-ui/core/Divider\";\nimport CheckBoxIcon from \"@material-ui/icons/CheckBox\";\nimport AccountBoxIcon from \"@material-ui/icons/AccountBox\";\nimport EmojiEmotionsIcon from \"@material-ui/icons/EmojiEmotions\";\n\nimport Todos from \"./Todos\";\nimport Profile from \"./Profile\";\n\ntype pageType = \"todos\" | \"profile\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    height: \"100%\",\n  },\n  headerTitle: {\n    textTransform: \"capitalize\",\n  },\n  jokeListItem: {\n    maxWidth: theme.spacing(30),\n  },\n}));\n\nfunction App() {\n  const [page, setPage] = useState<pageType>(\"todos\");\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [joke, setJoke] = useState(\"\");\n\n  const classes = useStyles();\n\n  function setNewJoke() {\n    fetch(\n      \"https://v2.jokeapi.dev/joke/Programming?blacklistFlags=nsfw,religious,racist,sexist&format=txt\"\n    )\n      .then(response => response.text())\n      .then(setJoke)\n      .catch(() => setJoke(\"Could not get joke, please try again later.\"));\n  }\n\n  useEffect(setNewJoke, []);\n\n  function renderPage(page: pageType) {\n    switch (page) {\n      case \"todos\":\n        return <Todos />;\n      case \"profile\":\n        return <Profile />;\n    }\n  }\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton\n            onClick={() => setDrawerOpen(true)}\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"menu\"\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography className={classes.headerTitle} variant=\"h6\">\n            {page}\n          </Typography>\n        </Toolbar>\n      </AppBar>\n\n      <Drawer\n        anchor=\"left\"\n        open={drawerOpen}\n        onClose={() => setDrawerOpen(false)}\n      >\n        <List>\n          <ListItem\n            onClick={() => {\n              setDrawerOpen(false);\n              setPage(\"todos\");\n            }}\n            button\n          >\n            <ListItemIcon>\n              <CheckBoxIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Todos\" />\n          </ListItem>\n\n          <ListItem\n            onClick={() => {\n              setDrawerOpen(false);\n              setPage(\"profile\");\n            }}\n            button\n          >\n            <ListItemIcon>\n              <AccountBoxIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Profile\" />\n          </ListItem>\n\n          <Divider />\n          <ListItem onClick={setNewJoke} button>\n            <ListItemIcon>\n              <EmojiEmotionsIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Random joke\" />\n          </ListItem>\n          <ListItem className={classes.jokeListItem}>\n            <ListItemText primary={joke} />\n          </ListItem>\n        </List>\n      </Drawer>\n\n      {renderPage(page)}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}